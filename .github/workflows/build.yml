name: Build

permissions:
  checks: write
  pull-requests: write

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  test:
    name: Test & Analyze code
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Lint & test Kotlin code
        working-directory: ./src
        run: ./gradlew clean
          testReleaseUnitTest
          iosSimulatorArm64Test
          desktopTest
          lintRelease
          --build-cache --parallel --continue

      - name: Test Swift code
        if: always()
        run: set -eo pipefail && xcodebuild clean test
          -scheme iosApp
          -sdk iphonesimulator
          -destination "platform=iOS simulator,name=iPhone 16"
          -configuration Release
          -project src/iosApp/iosApp.xcodeproj
          -resultBundlePath src/iosApp/build/reports/iosApp.xcresult
          -enableCodeCoverage YES
          CODE_SIGNING_ALLOWED=NO | xcbeautify
          --report junit
          --report-path src/iosApp/build/reports/
          --junit-report-filename TEST-XcodeTestResults.xml

      # Converts XCode's xcresult file to a code coverage format that sonarqube understands,
      # according to the official guide/example:
      # https://github.com/SonarSource/sonar-scanning-examples/tree/master/swift-coverage
      - name: 'Convert code coverage result format'
        run: bash src/iosApp/xccov-to-sonarqube-generic.sh src/iosApp/build/reports/iosApp.xcresult > src/iosApp/build/reports/Swift-Coverage.xml
        if: always()

      - name: Publish Kotlin test results
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        if: always()
        with:
          files: '**/test-results/**/*.xml'
          check_name: 'Kotlin test results'

      - name: Archive Kotlin test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: kotlin-unit-test-results
          path: '**/test-results/**/*.xml'

      - name: Publish Swift test results
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        if: always()
        with:
          files: '**/iosApp/build/reports/**/*.xml'
          check_name: 'Swift test results'

      - name: Archive Swift test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: swift-test-results
          path: 'src/iosApp/build/reports/'

      - name: Install sonar cli
        uses: Warchant/setup-sonar-scanner@v8
        if: always()

      - name: SonarQube Cloud Scan
        if: always()
        run: sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  testAndroidInstrumented:
    name: Run Android instrumented tests
    runs-on: ubuntu-latest
    steps:
      - name: Checking out branch
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Run Android instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          arch: x86_64
          working-directory: ./src
          script: ./gradlew clean connectedAndroidTest

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        if: always()
        with:
          files: '**/androidTest-results/**/*.xml'
          check_name: 'Android instrumented test results'

      - name: Archive test results
        uses: actions/upload-artifact@v4
        with:
          name: android-instrumented-test-results
          path: '**/androidTest-results/**/*.xml'

  buildAndroid:
    name: Build Android app
    runs-on: ubuntu-latest
    steps:
      - name: Checking out branch
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Assemble release build
        working-directory: ./src
        run: ./gradlew assembleRelease

      - name: Get release file apk path
        id: releaseApk
        run: echo "apkfile=$(find src/composeApp/build/outputs/apk/release/*.apk)" >> $GITHUB_OUTPUT

      - name: Upload Release Build to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: ${{ steps.releaseApk.outputs.apkfile }}